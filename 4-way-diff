#!/bin/bash
#
# Perform a 4-way diff between:
#   - local feature/topic branch + whether it is clean (fully committed)
#   - remote feature/topic branch
#   - remote main branch
#   - local main branch
#
# Give the user a good message about which is not in sync
# and what needs to be done to make it so.
#
function out() {
    echo "$0: $@"
}

function err() {
    out "$@" >&2
}

function die() {
    err "$@"
    exit 1
}

function current-branch() {
    git rev-parse --abbrev-ref HEAD
}

function local-branch-exists() {
    local branchname="$1"
    git show-ref --verify --quiet "refs/heads/$branchname"
    # $? == 0 means local branch <branchname> exists.
}

function get-main-branch-name() {
    local arg="$1"
    for branch in "$arg" 'master' 'main'; do
        if [[ -z "$branch" ]]; then
            continue
        fi
        if local-branch-exists "$branch"; then
            echo "$branch"
        fi
    done
}

function remote-branch-exists() {
    git ls-remote --heads origin | grep -q "refs/heads/$1\$"
}

#
# -- main
#
CB="$(current-branch)"
MB="$(get-main-branch-name)"

if git diff --exit-code; then
    echo "(1) $CB branch is clean, cool"
else
    die "(1) $CB branch not clean. Need to commit (or stash) locally"
fi

if git diff --exit-code $CB origin/$CB; then
    echo "(2) $CB branch: local == remote, no need to push, cool"
else
    die "(2) $CB branch: local != remote. Need to push"
fi

if remote-branch-exists $CB; then
    if git diff --exit-code $CB origin/$MB; then
        echo "(3) local $CB == remote $MB, no need to remote-merge"
    else
        die "(3) local $CB != remote $MB. Need to remote-merge"
    fi
else
    echo "(3) remote $CB doesn't exist (already merged?)"
fi

if git diff --exit-code $MB; then
    echo "(4) local $CB == local $MB, no need to pull in $MB, cool"
else
    err "(4) local $CB != local $MB. Need to pull in local $MB"
    die "To fix:
        git fetch origin $MB"
fi
